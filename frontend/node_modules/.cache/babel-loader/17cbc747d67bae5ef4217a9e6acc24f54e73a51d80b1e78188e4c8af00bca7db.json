{"ast":null,"code":"var _jsxFileName = \"/home/azureuser/code/grv_project/frontend/src/contexts/SidebarContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create a context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SidebarContext = /*#__PURE__*/createContext();\nexport const SidebarProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize sidebar state from local storage, default to true (expanded)\n  const [isSidebarOpen, setIsSidebarOpen] = useState(() => {\n    const savedState = localStorage.getItem('isSidebarOpen');\n    return savedState === null ? true : JSON.parse(savedState);\n  });\n\n  // Update local storage whenever sidebar state changes\n  useEffect(() => {\n    localStorage.setItem('isSidebarOpen', JSON.stringify(isSidebarOpen));\n  }, [isSidebarOpen]);\n  const toggleSidebar = () => {\n    setIsSidebarOpen(prevState => !prevState);\n  };\n  return /*#__PURE__*/_jsxDEV(SidebarContext.Provider, {\n    value: {\n      isSidebarOpen,\n      toggleSidebar\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(SidebarProvider, \"ILqPhKA9H0mUM9QIaLguHzfc01c=\");\n_c = SidebarProvider;\nvar _c;\n$RefreshReg$(_c, \"SidebarProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","SidebarContext","SidebarProvider","children","_s","isSidebarOpen","setIsSidebarOpen","savedState","localStorage","getItem","JSON","parse","setItem","stringify","toggleSidebar","prevState","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/azureuser/code/grv_project/frontend/src/contexts/SidebarContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Create a context\r\nexport const SidebarContext = createContext();\r\n\r\nexport const SidebarProvider = ({ children }) => {\r\n  // Initialize sidebar state from local storage, default to true (expanded)\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(() => {\r\n    const savedState = localStorage.getItem('isSidebarOpen');\r\n    return savedState === null ? true : JSON.parse(savedState);\r\n  });\r\n\r\n  // Update local storage whenever sidebar state changes\r\n  useEffect(() => {\r\n    localStorage.setItem('isSidebarOpen', JSON.stringify(isSidebarOpen));\r\n  }, [isSidebarOpen]);\r\n\r\n  const toggleSidebar = () => {\r\n    setIsSidebarOpen((prevState) => !prevState);\r\n  };\r\n\r\n  return (\r\n    <SidebarContext.Provider value={{ isSidebarOpen, toggleSidebar }}>\r\n      {children}\r\n    </SidebarContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,cAAc,gBAAGL,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMM,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACvD,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACxD,OAAOF,UAAU,KAAK,IAAI,GAAG,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC;EAC5D,CAAC,CAAC;;EAEF;EACAT,SAAS,CAAC,MAAM;IACdU,YAAY,CAACI,OAAO,CAAC,eAAe,EAAEF,IAAI,CAACG,SAAS,CAACR,aAAa,CAAC,CAAC;EACtE,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,MAAMS,aAAa,GAAGA,CAAA,KAAM;IAC1BR,gBAAgB,CAAES,SAAS,IAAK,CAACA,SAAS,CAAC;EAC7C,CAAC;EAED,oBACEf,OAAA,CAACC,cAAc,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,aAAa;MAAES;IAAc,CAAE;IAAAX,QAAA,EAC9DA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACjB,EAAA,CArBWF,eAAe;AAAAoB,EAAA,GAAfpB,eAAe;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}